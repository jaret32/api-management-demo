name: Build, Test, and Deploy

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]
    types: [ opened, synchronize ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        path: source
    - uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.base.sha }}
        path: base
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: Restore dependencies
      run: dotnet restore 
      working-directory: ./source
    - name: Build
      run: dotnet build --no-restore
      working-directory: ./source
    - name: Test
      run: dotnet test --no-build --verbosity normal
      working-directory: ./source
    - name: Diff OpenAPI specifications
      uses: docker://openapitools/openapi-diff:latest
      with:
        args: /github/workspace/base/.openapi/apis/order-api.yaml /github/workspace/source/.openapi/apis/order-api.yaml --fail-on-incompatible
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_KEY }}
    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
      working-directory: ./source/.terraform
    - name: Terraform Init
      id: init
      run: terraform init
      working-directory: ./source/.terraform
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      working-directory: ./source/.terraform
    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color
      continue-on-error: true
      working-directory: ./source/.terraform
    - name: Update Pull Request
      uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outputs.stdout }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1
    - name: Terraform Apply
      if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
      run: terraform apply -auto-approve
      working-directory: ./source/.terraform
